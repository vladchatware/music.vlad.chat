/* tslint:disable */
/* eslint-disable */
/**
 * instagrapi-rest
 * RESTful API Service for instagrapi
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    pk?: number;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    website?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    category?: string;
    /**
     * 
     * @type {object}
     * @memberof Location
     */
    hours?: object;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    zip?: string;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    lng?: number;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    lat?: number;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    externalId?: number;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    externalIdSource?: string;
}

/**
 * Check if a given object implements the Location interface.
 */
export function instanceOfLocation(value: object): value is Location {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function LocationFromJSON(json: any): Location {
    return LocationFromJSONTyped(json, false);
}

export function LocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Location {
    if (json == null) {
        return json;
    }
    return {
        
        'pk': json['pk'] == null ? undefined : json['pk'],
        'name': json['name'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'website': json['website'] == null ? undefined : json['website'],
        'category': json['category'] == null ? undefined : json['category'],
        'hours': json['hours'] == null ? undefined : json['hours'],
        'address': json['address'] == null ? undefined : json['address'],
        'city': json['city'] == null ? undefined : json['city'],
        'zip': json['zip'] == null ? undefined : json['zip'],
        'lng': json['lng'] == null ? undefined : json['lng'],
        'lat': json['lat'] == null ? undefined : json['lat'],
        'externalId': json['external_id'] == null ? undefined : json['external_id'],
        'externalIdSource': json['external_id_source'] == null ? undefined : json['external_id_source'],
    };
}

export function LocationToJSON(json: any): Location {
    return LocationToJSONTyped(json, false);
}

export function LocationToJSONTyped(value?: Location | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'pk': value['pk'],
        'name': value['name'],
        'phone': value['phone'],
        'website': value['website'],
        'category': value['category'],
        'hours': value['hours'],
        'address': value['address'],
        'city': value['city'],
        'zip': value['zip'],
        'lng': value['lng'],
        'lat': value['lat'],
        'external_id': value['externalId'],
        'external_id_source': value['externalIdSource'],
    };
}

