/* tslint:disable */
/* eslint-disable */
/**
 * instagrapi-rest
 * RESTful API Service for instagrapi
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../../runtime';
import type { UserShort } from './UserShort';
import {
    UserShortFromJSON,
    UserShortFromJSONTyped,
    UserShortToJSON,
    UserShortToJSONTyped,
} from './UserShort';
import type { Resource } from './Resource';
import {
    ResourceFromJSON,
    ResourceFromJSONTyped,
    ResourceToJSON,
    ResourceToJSONTyped,
} from './Resource';
import type { Usertag } from './Usertag';
import {
    UsertagFromJSON,
    UsertagFromJSONTyped,
    UsertagToJSON,
    UsertagToJSONTyped,
} from './Usertag';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
    LocationToJSONTyped,
} from './Location';

/**
 * 
 * @export
 * @interface Media
 */
export interface Media {
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    pk: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    code: string;
    /**
     * 
     * @type {Date}
     * @memberof Media
     */
    takenAt: Date;
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    mediaType: number;
    /**
     * 
     * @type {object}
     * @memberof Media
     */
    imageVersions2?: object;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    productType?: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    thumbnailUrl?: string;
    /**
     * 
     * @type {Location}
     * @memberof Media
     */
    location?: Location;
    /**
     * 
     * @type {UserShort}
     * @memberof Media
     */
    user: UserShort;
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    commentCount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Media
     */
    commentsDisabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Media
     */
    commentingDisabledForViewer?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    likeCount: number;
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    playCount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Media
     */
    hasLiked?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    captionText: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    accessibilityCaption?: string;
    /**
     * 
     * @type {Array<Usertag>}
     * @memberof Media
     */
    usertags: Array<Usertag>;
    /**
     * 
     * @type {Array<UserShort>}
     * @memberof Media
     */
    sponsorTags: Array<UserShort>;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    videoUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    viewCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    videoDuration?: number;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    title?: string;
    /**
     * 
     * @type {Array<Resource>}
     * @memberof Media
     */
    resources?: Array<Resource>;
    /**
     * 
     * @type {object}
     * @memberof Media
     */
    clipsMetadata?: object;
}

/**
 * Check if a given object implements the Media interface.
 */
export function instanceOfMedia(value: object): value is Media {
    if (!('pk' in value) || value['pk'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('takenAt' in value) || value['takenAt'] === undefined) return false;
    if (!('mediaType' in value) || value['mediaType'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('likeCount' in value) || value['likeCount'] === undefined) return false;
    if (!('captionText' in value) || value['captionText'] === undefined) return false;
    if (!('usertags' in value) || value['usertags'] === undefined) return false;
    if (!('sponsorTags' in value) || value['sponsorTags'] === undefined) return false;
    return true;
}

export function MediaFromJSON(json: any): Media {
    return MediaFromJSONTyped(json, false);
}

export function MediaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Media {
    if (json == null) {
        return json;
    }
    return {
        
        'pk': json['pk'],
        'id': json['id'],
        'code': json['code'],
        'takenAt': (new Date(json['taken_at'])),
        'mediaType': json['media_type'],
        'imageVersions2': json['image_versions2'] == null ? undefined : json['image_versions2'],
        'productType': json['product_type'] == null ? undefined : json['product_type'],
        'thumbnailUrl': json['thumbnail_url'] == null ? undefined : json['thumbnail_url'],
        'location': json['location'] == null ? undefined : LocationFromJSON(json['location']),
        'user': UserShortFromJSON(json['user']),
        'commentCount': json['comment_count'] == null ? undefined : json['comment_count'],
        'commentsDisabled': json['comments_disabled'] == null ? undefined : json['comments_disabled'],
        'commentingDisabledForViewer': json['commenting_disabled_for_viewer'] == null ? undefined : json['commenting_disabled_for_viewer'],
        'likeCount': json['like_count'],
        'playCount': json['play_count'] == null ? undefined : json['play_count'],
        'hasLiked': json['has_liked'] == null ? undefined : json['has_liked'],
        'captionText': json['caption_text'],
        'accessibilityCaption': json['accessibility_caption'] == null ? undefined : json['accessibility_caption'],
        'usertags': ((json['usertags'] as Array<any>).map(UsertagFromJSON)),
        'sponsorTags': ((json['sponsor_tags'] as Array<any>).map(UserShortFromJSON)),
        'videoUrl': json['video_url'] == null ? undefined : json['video_url'],
        'viewCount': json['view_count'] == null ? undefined : json['view_count'],
        'videoDuration': json['video_duration'] == null ? undefined : json['video_duration'],
        'title': json['title'] == null ? undefined : json['title'],
        'resources': json['resources'] == null ? undefined : ((json['resources'] as Array<any>).map(ResourceFromJSON)),
        'clipsMetadata': json['clips_metadata'] == null ? undefined : json['clips_metadata'],
    };
}

export function MediaToJSON(json: any): Media {
    return MediaToJSONTyped(json, false);
}

export function MediaToJSONTyped(value?: Media | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'pk': value['pk'],
        'id': value['id'],
        'code': value['code'],
        'taken_at': ((value['takenAt']).toISOString()),
        'media_type': value['mediaType'],
        'image_versions2': value['imageVersions2'],
        'product_type': value['productType'],
        'thumbnail_url': value['thumbnailUrl'],
        'location': LocationToJSON(value['location']),
        'user': UserShortToJSON(value['user']),
        'comment_count': value['commentCount'],
        'comments_disabled': value['commentsDisabled'],
        'commenting_disabled_for_viewer': value['commentingDisabledForViewer'],
        'like_count': value['likeCount'],
        'play_count': value['playCount'],
        'has_liked': value['hasLiked'],
        'caption_text': value['captionText'],
        'accessibility_caption': value['accessibilityCaption'],
        'usertags': ((value['usertags'] as Array<any>).map(UsertagToJSON)),
        'sponsor_tags': ((value['sponsorTags'] as Array<any>).map(UserShortToJSON)),
        'video_url': value['videoUrl'],
        'view_count': value['viewCount'],
        'video_duration': value['videoDuration'],
        'title': value['title'],
        'resources': value['resources'] == null ? undefined : ((value['resources'] as Array<any>).map(ResourceToJSON)),
        'clips_metadata': value['clipsMetadata'],
    };
}

