/* tslint:disable */
/* eslint-disable */
/**
 * instagrapi-rest
 * RESTful API Service for instagrapi
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  User,
  UserShort,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    UserFromJSON,
    UserToJSON,
    UserShortFromJSON,
    UserShortToJSON,
} from '../models/index';

export interface MutePostsFromFollowUserMutePostsFromFollowPostRequest {
    sessionid: string;
    userId: number;
    revert?: boolean;
}

export interface MuteStoriesFromFollowUserMuteStoriesFromFollowPostRequest {
    sessionid: string;
    userId: number;
    revert?: boolean;
}

export interface UnmutePostsFromFollowUserUnmutePostsFromFollowPostRequest {
    sessionid: string;
    userId: number;
}

export interface UnmuteStoriesFromFollowUserUnmuteStoriesFromFollowPostRequest {
    sessionid: string;
    userId: number;
}

export interface UserFollowUserFollowPostRequest {
    sessionid: string;
    userId: number;
}

export interface UserFollowersUserFollowersPostRequest {
    sessionid: string;
    userId: string;
    useCache?: boolean;
    amount?: number;
}

export interface UserFollowingUserFollowingPostRequest {
    sessionid: string;
    userId: string;
    useCache?: boolean;
    amount?: number;
}

export interface UserIdFromUsernameUserIdFromUsernamePostRequest {
    sessionid: string;
    username: string;
}

export interface UserInfoByUsernameUserInfoByUsernamePostRequest {
    sessionid: string;
    username: string;
    useCache?: boolean;
}

export interface UserInfoUserInfoPostRequest {
    sessionid: string;
    userId: string;
    useCache?: boolean;
}

export interface UserRemoveFollowerUserRemoveFollowerPostRequest {
    sessionid: string;
    userId: number;
}

export interface UserUnfollowUserUnfollowPostRequest {
    sessionid: string;
    userId: number;
}

export interface UsernameFromUserIdUserUsernameFromIdPostRequest {
    sessionid: string;
    userId: number;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Mute posts from following user     
     * Mute Posts From Follow
     */
    async mutePostsFromFollowUserMutePostsFromFollowPostRaw(requestParameters: MutePostsFromFollowUserMutePostsFromFollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling mutePostsFromFollowUserMutePostsFromFollowPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling mutePostsFromFollowUserMutePostsFromFollowPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['userId'] != null) {
            formParams.append('user_id', requestParameters['userId'] as any);
        }

        if (requestParameters['revert'] != null) {
            formParams.append('revert', requestParameters['revert'] as any);
        }


        let urlPath = `/user/mute_posts_from_follow`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Mute posts from following user     
     * Mute Posts From Follow
     */
    async mutePostsFromFollowUserMutePostsFromFollowPost(requestParameters: MutePostsFromFollowUserMutePostsFromFollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.mutePostsFromFollowUserMutePostsFromFollowPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mute stories from following user     
     * Mute Stories From Follow
     */
    async muteStoriesFromFollowUserMuteStoriesFromFollowPostRaw(requestParameters: MuteStoriesFromFollowUserMuteStoriesFromFollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling muteStoriesFromFollowUserMuteStoriesFromFollowPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling muteStoriesFromFollowUserMuteStoriesFromFollowPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['userId'] != null) {
            formParams.append('user_id', requestParameters['userId'] as any);
        }

        if (requestParameters['revert'] != null) {
            formParams.append('revert', requestParameters['revert'] as any);
        }


        let urlPath = `/user/mute_stories_from_follow`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Mute stories from following user     
     * Mute Stories From Follow
     */
    async muteStoriesFromFollowUserMuteStoriesFromFollowPost(requestParameters: MuteStoriesFromFollowUserMuteStoriesFromFollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.muteStoriesFromFollowUserMuteStoriesFromFollowPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unmute posts from following user     
     * Unmute Posts From Follow
     */
    async unmutePostsFromFollowUserUnmutePostsFromFollowPostRaw(requestParameters: UnmutePostsFromFollowUserUnmutePostsFromFollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling unmutePostsFromFollowUserUnmutePostsFromFollowPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling unmutePostsFromFollowUserUnmutePostsFromFollowPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['userId'] != null) {
            formParams.append('user_id', requestParameters['userId'] as any);
        }


        let urlPath = `/user/unmute_posts_from_follow`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Unmute posts from following user     
     * Unmute Posts From Follow
     */
    async unmutePostsFromFollowUserUnmutePostsFromFollowPost(requestParameters: UnmutePostsFromFollowUserUnmutePostsFromFollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.unmutePostsFromFollowUserUnmutePostsFromFollowPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unmute stories from following user     
     * Unmute Stories From Follow
     */
    async unmuteStoriesFromFollowUserUnmuteStoriesFromFollowPostRaw(requestParameters: UnmuteStoriesFromFollowUserUnmuteStoriesFromFollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling unmuteStoriesFromFollowUserUnmuteStoriesFromFollowPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling unmuteStoriesFromFollowUserUnmuteStoriesFromFollowPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['userId'] != null) {
            formParams.append('user_id', requestParameters['userId'] as any);
        }


        let urlPath = `/user/unmute_stories_from_follow`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Unmute stories from following user     
     * Unmute Stories From Follow
     */
    async unmuteStoriesFromFollowUserUnmuteStoriesFromFollowPost(requestParameters: UnmuteStoriesFromFollowUserUnmuteStoriesFromFollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.unmuteStoriesFromFollowUserUnmuteStoriesFromFollowPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Follow a user     
     * User Follow
     */
    async userFollowUserFollowPostRaw(requestParameters: UserFollowUserFollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling userFollowUserFollowPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userFollowUserFollowPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['userId'] != null) {
            formParams.append('user_id', requestParameters['userId'] as any);
        }


        let urlPath = `/user/follow`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Follow a user     
     * User Follow
     */
    async userFollowUserFollowPost(requestParameters: UserFollowUserFollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.userFollowUserFollowPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user\'s followers     
     * User Followers
     */
    async userFollowersUserFollowersPostRaw(requestParameters: UserFollowersUserFollowersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: UserShort; }>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling userFollowersUserFollowersPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userFollowersUserFollowersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['userId'] != null) {
            formParams.append('user_id', requestParameters['userId'] as any);
        }

        if (requestParameters['useCache'] != null) {
            formParams.append('use_cache', requestParameters['useCache'] as any);
        }

        if (requestParameters['amount'] != null) {
            formParams.append('amount', requestParameters['amount'] as any);
        }


        let urlPath = `/user/followers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, UserShortFromJSON));
    }

    /**
     * Get user\'s followers     
     * User Followers
     */
    async userFollowersUserFollowersPost(requestParameters: UserFollowersUserFollowersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: UserShort; }> {
        const response = await this.userFollowersUserFollowersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user\'s followers information     
     * User Following
     */
    async userFollowingUserFollowingPostRaw(requestParameters: UserFollowingUserFollowingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: UserShort; }>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling userFollowingUserFollowingPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userFollowingUserFollowingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['userId'] != null) {
            formParams.append('user_id', requestParameters['userId'] as any);
        }

        if (requestParameters['useCache'] != null) {
            formParams.append('use_cache', requestParameters['useCache'] as any);
        }

        if (requestParameters['amount'] != null) {
            formParams.append('amount', requestParameters['amount'] as any);
        }


        let urlPath = `/user/following`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, UserShortFromJSON));
    }

    /**
     * Get user\'s followers information     
     * User Following
     */
    async userFollowingUserFollowingPost(requestParameters: UserFollowingUserFollowingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: UserShort; }> {
        const response = await this.userFollowingUserFollowingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user id from username     
     * User Id From Username
     */
    async userIdFromUsernameUserIdFromUsernamePostRaw(requestParameters: UserIdFromUsernameUserIdFromUsernamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling userIdFromUsernameUserIdFromUsernamePost().'
            );
        }

        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userIdFromUsernameUserIdFromUsernamePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['username'] != null) {
            formParams.append('username', requestParameters['username'] as any);
        }


        let urlPath = `/user/id_from_username`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get user id from username     
     * User Id From Username
     */
    async userIdFromUsernameUserIdFromUsernamePost(requestParameters: UserIdFromUsernameUserIdFromUsernamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.userIdFromUsernameUserIdFromUsernamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user object from username     
     * User Info By Username
     */
    async userInfoByUsernameUserInfoByUsernamePostRaw(requestParameters: UserInfoByUsernameUserInfoByUsernamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling userInfoByUsernameUserInfoByUsernamePost().'
            );
        }

        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling userInfoByUsernameUserInfoByUsernamePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['username'] != null) {
            formParams.append('username', requestParameters['username'] as any);
        }

        if (requestParameters['useCache'] != null) {
            formParams.append('use_cache', requestParameters['useCache'] as any);
        }


        let urlPath = `/user/info_by_username`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get user object from username     
     * User Info By Username
     */
    async userInfoByUsernameUserInfoByUsernamePost(requestParameters: UserInfoByUsernameUserInfoByUsernamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.userInfoByUsernameUserInfoByUsernamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user object from user id     
     * User Info
     */
    async userInfoUserInfoPostRaw(requestParameters: UserInfoUserInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling userInfoUserInfoPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userInfoUserInfoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['userId'] != null) {
            formParams.append('user_id', requestParameters['userId'] as any);
        }

        if (requestParameters['useCache'] != null) {
            formParams.append('use_cache', requestParameters['useCache'] as any);
        }


        let urlPath = `/user/info`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Get user object from user id     
     * User Info
     */
    async userInfoUserInfoPost(requestParameters: UserInfoUserInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.userInfoUserInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a follower     
     * User Remove Follower
     */
    async userRemoveFollowerUserRemoveFollowerPostRaw(requestParameters: UserRemoveFollowerUserRemoveFollowerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling userRemoveFollowerUserRemoveFollowerPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userRemoveFollowerUserRemoveFollowerPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['userId'] != null) {
            formParams.append('user_id', requestParameters['userId'] as any);
        }


        let urlPath = `/user/remove_follower`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Remove a follower     
     * User Remove Follower
     */
    async userRemoveFollowerUserRemoveFollowerPost(requestParameters: UserRemoveFollowerUserRemoveFollowerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.userRemoveFollowerUserRemoveFollowerPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unfollow a user     
     * User Unfollow
     */
    async userUnfollowUserUnfollowPostRaw(requestParameters: UserUnfollowUserUnfollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling userUnfollowUserUnfollowPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userUnfollowUserUnfollowPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['userId'] != null) {
            formParams.append('user_id', requestParameters['userId'] as any);
        }


        let urlPath = `/user/unfollow`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Unfollow a user     
     * User Unfollow
     */
    async userUnfollowUserUnfollowPost(requestParameters: UserUnfollowUserUnfollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.userUnfollowUserUnfollowPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get username from user id     
     * Username From User Id
     */
    async usernameFromUserIdUserUsernameFromIdPostRaw(requestParameters: UsernameFromUserIdUserUsernameFromIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling usernameFromUserIdUserUsernameFromIdPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usernameFromUserIdUserUsernameFromIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['userId'] != null) {
            formParams.append('user_id', requestParameters['userId'] as any);
        }


        let urlPath = `/user/username_from_id`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get username from user id     
     * Username From User Id
     */
    async usernameFromUserIdUserUsernameFromIdPost(requestParameters: UsernameFromUserIdUserUsernameFromIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.usernameFromUserIdUserUsernameFromIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
