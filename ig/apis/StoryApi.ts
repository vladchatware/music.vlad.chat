/* tslint:disable */
/* eslint-disable */
/**
 * instagrapi-rest
 * RESTful API Service for instagrapi
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Story,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    StoryFromJSON,
    StoryToJSON,
} from '../models/index';

export interface StoryDeleteStoryDeletePostRequest {
    sessionid: string;
    storyPk: number;
}

export interface StoryDownloadByUrlStoryDownloadByUrlPostRequest {
    sessionid: string;
    url: string;
    filename?: string;
    folder?: string;
    returnFile?: boolean;
}

export interface StoryDownloadStoryDownloadPostRequest {
    sessionid: string;
    storyPk: number;
    filename?: string;
    folder?: string;
    returnFile?: boolean;
}

export interface StoryInfoStoryInfoPostRequest {
    sessionid: string;
    storyPk: number;
    useCache?: boolean;
}

export interface StoryLikeStoryLikePostRequest {
    sessionid: string;
    storyId: string;
    revert?: boolean;
}

export interface StoryPkFromUrlStoryPkFromUrlGetRequest {
    url: string;
}

export interface StorySeenStorySeenPostRequest {
    sessionid: string;
    storyPks: Array<number>;
    skippedStoryPks?: Array<number>;
}

export interface StoryUnlikeStoryUnlikePostRequest {
    sessionid: string;
    storyId: string;
}

export interface StoryUserStoriesStoryUserStoriesPostRequest {
    sessionid: string;
    userId: string;
    amount?: number;
}

/**
 * 
 */
export class StoryApi extends runtime.BaseAPI {

    /**
     * Delete story     
     * Story Delete
     */
    async storyDeleteStoryDeletePostRaw(requestParameters: StoryDeleteStoryDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling storyDeleteStoryDeletePost().'
            );
        }

        if (requestParameters['storyPk'] == null) {
            throw new runtime.RequiredError(
                'storyPk',
                'Required parameter "storyPk" was null or undefined when calling storyDeleteStoryDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['storyPk'] != null) {
            formParams.append('story_pk', requestParameters['storyPk'] as any);
        }


        let urlPath = `/story/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete story     
     * Story Delete
     */
    async storyDeleteStoryDeletePost(requestParameters: StoryDeleteStoryDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.storyDeleteStoryDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download story media using URL     
     * Story Download By Url
     */
    async storyDownloadByUrlStoryDownloadByUrlPostRaw(requestParameters: StoryDownloadByUrlStoryDownloadByUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling storyDownloadByUrlStoryDownloadByUrlPost().'
            );
        }

        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling storyDownloadByUrlStoryDownloadByUrlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['url'] != null) {
            formParams.append('url', requestParameters['url'] as any);
        }

        if (requestParameters['filename'] != null) {
            formParams.append('filename', requestParameters['filename'] as any);
        }

        if (requestParameters['folder'] != null) {
            formParams.append('folder', requestParameters['folder'] as any);
        }

        if (requestParameters['returnFile'] != null) {
            formParams.append('returnFile', requestParameters['returnFile'] as any);
        }


        let urlPath = `/story/download/by_url`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download story media using URL     
     * Story Download By Url
     */
    async storyDownloadByUrlStoryDownloadByUrlPost(requestParameters: StoryDownloadByUrlStoryDownloadByUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.storyDownloadByUrlStoryDownloadByUrlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download story media by media_type     
     * Story Download
     */
    async storyDownloadStoryDownloadPostRaw(requestParameters: StoryDownloadStoryDownloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling storyDownloadStoryDownloadPost().'
            );
        }

        if (requestParameters['storyPk'] == null) {
            throw new runtime.RequiredError(
                'storyPk',
                'Required parameter "storyPk" was null or undefined when calling storyDownloadStoryDownloadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['storyPk'] != null) {
            formParams.append('story_pk', requestParameters['storyPk'] as any);
        }

        if (requestParameters['filename'] != null) {
            formParams.append('filename', requestParameters['filename'] as any);
        }

        if (requestParameters['folder'] != null) {
            formParams.append('folder', requestParameters['folder'] as any);
        }

        if (requestParameters['returnFile'] != null) {
            formParams.append('returnFile', requestParameters['returnFile'] as any);
        }


        let urlPath = `/story/download`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download story media by media_type     
     * Story Download
     */
    async storyDownloadStoryDownloadPost(requestParameters: StoryDownloadStoryDownloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.storyDownloadStoryDownloadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Story by pk or id     
     * Story Info
     */
    async storyInfoStoryInfoPostRaw(requestParameters: StoryInfoStoryInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Story>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling storyInfoStoryInfoPost().'
            );
        }

        if (requestParameters['storyPk'] == null) {
            throw new runtime.RequiredError(
                'storyPk',
                'Required parameter "storyPk" was null or undefined when calling storyInfoStoryInfoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['storyPk'] != null) {
            formParams.append('story_pk', requestParameters['storyPk'] as any);
        }

        if (requestParameters['useCache'] != null) {
            formParams.append('use_cache', requestParameters['useCache'] as any);
        }


        let urlPath = `/story/info`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoryFromJSON(jsonValue));
    }

    /**
     * Get Story by pk or id     
     * Story Info
     */
    async storyInfoStoryInfoPost(requestParameters: StoryInfoStoryInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Story> {
        const response = await this.storyInfoStoryInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Like a Story     
     * Story Like
     */
    async storyLikeStoryLikePostRaw(requestParameters: StoryLikeStoryLikePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling storyLikeStoryLikePost().'
            );
        }

        if (requestParameters['storyId'] == null) {
            throw new runtime.RequiredError(
                'storyId',
                'Required parameter "storyId" was null or undefined when calling storyLikeStoryLikePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['storyId'] != null) {
            formParams.append('story_id', requestParameters['storyId'] as any);
        }

        if (requestParameters['revert'] != null) {
            formParams.append('revert', requestParameters['revert'] as any);
        }


        let urlPath = `/story/like`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Like a Story     
     * Story Like
     */
    async storyLikeStoryLikePost(requestParameters: StoryLikeStoryLikePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.storyLikeStoryLikePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Story (media) PK from URL     
     * Story Pk From Url
     */
    async storyPkFromUrlStoryPkFromUrlGetRaw(requestParameters: StoryPkFromUrlStoryPkFromUrlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling storyPkFromUrlStoryPkFromUrlGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/story/pk_from_url`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Story (media) PK from URL     
     * Story Pk From Url
     */
    async storyPkFromUrlStoryPkFromUrlGet(requestParameters: StoryPkFromUrlStoryPkFromUrlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.storyPkFromUrlStoryPkFromUrlGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark a media as seen     
     * Story Seen
     */
    async storySeenStorySeenPostRaw(requestParameters: StorySeenStorySeenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling storySeenStorySeenPost().'
            );
        }

        if (requestParameters['storyPks'] == null) {
            throw new runtime.RequiredError(
                'storyPks',
                'Required parameter "storyPks" was null or undefined when calling storySeenStorySeenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['storyPks'] != null) {
            formParams.append('story_pks', requestParameters['storyPks']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['skippedStoryPks'] != null) {
            formParams.append('skipped_story_pks', requestParameters['skippedStoryPks']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }


        let urlPath = `/story/seen`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Mark a media as seen     
     * Story Seen
     */
    async storySeenStorySeenPost(requestParameters: StorySeenStorySeenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.storySeenStorySeenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unlike a Story     
     * Story Unlike
     */
    async storyUnlikeStoryUnlikePostRaw(requestParameters: StoryUnlikeStoryUnlikePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling storyUnlikeStoryUnlikePost().'
            );
        }

        if (requestParameters['storyId'] == null) {
            throw new runtime.RequiredError(
                'storyId',
                'Required parameter "storyId" was null or undefined when calling storyUnlikeStoryUnlikePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['storyId'] != null) {
            formParams.append('story_id', requestParameters['storyId'] as any);
        }


        let urlPath = `/story/unlike`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Unlike a Story     
     * Story Unlike
     */
    async storyUnlikeStoryUnlikePost(requestParameters: StoryUnlikeStoryUnlikePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.storyUnlikeStoryUnlikePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a user\'s stories     
     * Story User Stories
     */
    async storyUserStoriesStoryUserStoriesPostRaw(requestParameters: StoryUserStoriesStoryUserStoriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Story>>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling storyUserStoriesStoryUserStoriesPost().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling storyUserStoriesStoryUserStoriesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['userId'] != null) {
            formParams.append('user_id', requestParameters['userId'] as any);
        }

        if (requestParameters['amount'] != null) {
            formParams.append('amount', requestParameters['amount'] as any);
        }


        let urlPath = `/story/user_stories`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StoryFromJSON));
    }

    /**
     * Get a user\'s stories     
     * Story User Stories
     */
    async storyUserStoriesStoryUserStoriesPost(requestParameters: StoryUserStoriesStoryUserStoriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Story>> {
        const response = await this.storyUserStoriesStoryUserStoriesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
