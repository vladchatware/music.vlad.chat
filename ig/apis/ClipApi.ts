/* tslint:disable */
/* eslint-disable */
/**
 * instagrapi-rest
 * RESTful API Service for instagrapi
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Location,
  Media,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LocationFromJSON,
    LocationToJSON,
    MediaFromJSON,
    MediaToJSON,
} from '../models/index';

export interface ClipDownloadByUrlClipDownloadByUrlPostRequest {
    sessionid: string;
    url: string;
    filename?: string;
    folder?: string;
    returnFile?: boolean;
}

export interface ClipDownloadClipDownloadPostRequest {
    sessionid: string;
    mediaPk: number;
    folder?: string;
    returnFile?: boolean;
}

export interface ClipUploadClipUploadByUrlPostRequest {
    sessionid: string;
    url: string;
    caption: string;
    thumbnail?: Blob;
    usertags?: Array<string>;
    location?: Location;
}

export interface ClipUploadClipUploadPostRequest {
    sessionid: string;
    file: Blob;
    caption: string;
    thumbnail?: Blob;
    usertags?: Array<string>;
    location?: Location;
}

/**
 * 
 */
export class ClipApi extends runtime.BaseAPI {

    /**
     * Download CLIP video using URL     
     * Clip Download By Url
     */
    async clipDownloadByUrlClipDownloadByUrlPostRaw(requestParameters: ClipDownloadByUrlClipDownloadByUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling clipDownloadByUrlClipDownloadByUrlPost().'
            );
        }

        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling clipDownloadByUrlClipDownloadByUrlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['url'] != null) {
            formParams.append('url', requestParameters['url'] as any);
        }

        if (requestParameters['filename'] != null) {
            formParams.append('filename', requestParameters['filename'] as any);
        }

        if (requestParameters['folder'] != null) {
            formParams.append('folder', requestParameters['folder'] as any);
        }

        if (requestParameters['returnFile'] != null) {
            formParams.append('returnFile', requestParameters['returnFile'] as any);
        }


        let urlPath = `/clip/download/by_url`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download CLIP video using URL     
     * Clip Download By Url
     */
    async clipDownloadByUrlClipDownloadByUrlPost(requestParameters: ClipDownloadByUrlClipDownloadByUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.clipDownloadByUrlClipDownloadByUrlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download CLIP video using media pk     
     * Clip Download
     */
    async clipDownloadClipDownloadPostRaw(requestParameters: ClipDownloadClipDownloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling clipDownloadClipDownloadPost().'
            );
        }

        if (requestParameters['mediaPk'] == null) {
            throw new runtime.RequiredError(
                'mediaPk',
                'Required parameter "mediaPk" was null or undefined when calling clipDownloadClipDownloadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['mediaPk'] != null) {
            formParams.append('media_pk', requestParameters['mediaPk'] as any);
        }

        if (requestParameters['folder'] != null) {
            formParams.append('folder', requestParameters['folder'] as any);
        }

        if (requestParameters['returnFile'] != null) {
            formParams.append('returnFile', requestParameters['returnFile'] as any);
        }


        let urlPath = `/clip/download`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download CLIP video using media pk     
     * Clip Download
     */
    async clipDownloadClipDownloadPost(requestParameters: ClipDownloadClipDownloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.clipDownloadClipDownloadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload photo by URL and configure to feed     
     * Clip Upload
     */
    async clipUploadClipUploadByUrlPostRaw(requestParameters: ClipUploadClipUploadByUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Media>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling clipUploadClipUploadByUrlPost().'
            );
        }

        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling clipUploadClipUploadByUrlPost().'
            );
        }

        if (requestParameters['caption'] == null) {
            throw new runtime.RequiredError(
                'caption',
                'Required parameter "caption" was null or undefined when calling clipUploadClipUploadByUrlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['url'] != null) {
            formParams.append('url', requestParameters['url'] as any);
        }

        if (requestParameters['caption'] != null) {
            formParams.append('caption', requestParameters['caption'] as any);
        }

        if (requestParameters['thumbnail'] != null) {
            formParams.append('thumbnail', requestParameters['thumbnail'] as any);
        }

        if (requestParameters['usertags'] != null) {
            formParams.append('usertags', requestParameters['usertags']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['location'] != null) {
            formParams.append('location', new Blob([JSON.stringify(MediaToJSON(requestParameters['location']))], { type: "application/json", }));
                    }


        let urlPath = `/clip/upload/by_url`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFromJSON(jsonValue));
    }

    /**
     * Upload photo by URL and configure to feed     
     * Clip Upload
     */
    async clipUploadClipUploadByUrlPost(requestParameters: ClipUploadClipUploadByUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Media> {
        const response = await this.clipUploadClipUploadByUrlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload photo and configure to feed     
     * Clip Upload
     */
    async clipUploadClipUploadPostRaw(requestParameters: ClipUploadClipUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Media>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling clipUploadClipUploadPost().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling clipUploadClipUploadPost().'
            );
        }

        if (requestParameters['caption'] == null) {
            throw new runtime.RequiredError(
                'caption',
                'Required parameter "caption" was null or undefined when calling clipUploadClipUploadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['caption'] != null) {
            formParams.append('caption', requestParameters['caption'] as any);
        }

        if (requestParameters['thumbnail'] != null) {
            formParams.append('thumbnail', requestParameters['thumbnail'] as any);
        }

        if (requestParameters['usertags'] != null) {
            formParams.append('usertags', requestParameters['usertags']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['location'] != null) {
            formParams.append('location', new Blob([JSON.stringify(MediaToJSON(requestParameters['location']))], { type: "application/json", }));
                    }


        let urlPath = `/clip/upload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFromJSON(jsonValue));
    }

    /**
     * Upload photo and configure to feed     
     * Clip Upload
     */
    async clipUploadClipUploadPost(requestParameters: ClipUploadClipUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Media> {
        const response = await this.clipUploadClipUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
