/* tslint:disable */
/* eslint-disable */
/**
 * instagrapi-rest
 * RESTful API Service for instagrapi
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Location,
  Media,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LocationFromJSON,
    LocationToJSON,
    MediaFromJSON,
    MediaToJSON,
} from '../models/index';

export interface AlbumDownloadAlbumDownloadPostRequest {
    sessionid: string;
    mediaPk: number;
    folder?: string;
}

export interface AlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest {
    sessionid: string;
    urls: Array<string>;
    folder?: string;
}

export interface AlbumUploadAlbumUploadPostRequest {
    sessionid: string;
    files: Array<Blob>;
    caption: string;
    usertags?: Array<string>;
    location?: Location;
}

/**
 * 
 */
export class AlbumApi extends runtime.BaseAPI {

    /**
     * Download photo using media pk     
     * Album Download
     */
    async albumDownloadAlbumDownloadPostRaw(requestParameters: AlbumDownloadAlbumDownloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling albumDownloadAlbumDownloadPost().'
            );
        }

        if (requestParameters['mediaPk'] == null) {
            throw new runtime.RequiredError(
                'mediaPk',
                'Required parameter "mediaPk" was null or undefined when calling albumDownloadAlbumDownloadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['mediaPk'] != null) {
            formParams.append('media_pk', requestParameters['mediaPk'] as any);
        }

        if (requestParameters['folder'] != null) {
            formParams.append('folder', requestParameters['folder'] as any);
        }


        let urlPath = `/album/download`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Download photo using media pk     
     * Album Download
     */
    async albumDownloadAlbumDownloadPost(requestParameters: AlbumDownloadAlbumDownloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.albumDownloadAlbumDownloadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download photo using URL     
     * Album Download By Urls
     */
    async albumDownloadByUrlsAlbumDownloadByUrlsPostRaw(requestParameters: AlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling albumDownloadByUrlsAlbumDownloadByUrlsPost().'
            );
        }

        if (requestParameters['urls'] == null) {
            throw new runtime.RequiredError(
                'urls',
                'Required parameter "urls" was null or undefined when calling albumDownloadByUrlsAlbumDownloadByUrlsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['urls'] != null) {
            formParams.append('urls', requestParameters['urls']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['folder'] != null) {
            formParams.append('folder', requestParameters['folder'] as any);
        }


        let urlPath = `/album/download/by_urls`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Download photo using URL     
     * Album Download By Urls
     */
    async albumDownloadByUrlsAlbumDownloadByUrlsPost(requestParameters: AlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.albumDownloadByUrlsAlbumDownloadByUrlsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload album to feed     
     * Album Upload
     */
    async albumUploadAlbumUploadPostRaw(requestParameters: AlbumUploadAlbumUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Media>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling albumUploadAlbumUploadPost().'
            );
        }

        if (requestParameters['files'] == null) {
            throw new runtime.RequiredError(
                'files',
                'Required parameter "files" was null or undefined when calling albumUploadAlbumUploadPost().'
            );
        }

        if (requestParameters['caption'] == null) {
            throw new runtime.RequiredError(
                'caption',
                'Required parameter "caption" was null or undefined when calling albumUploadAlbumUploadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['files'] != null) {
            requestParameters['files'].forEach((element) => {
                formParams.append('files', element as any);
            })
        }

        if (requestParameters['caption'] != null) {
            formParams.append('caption', requestParameters['caption'] as any);
        }

        if (requestParameters['usertags'] != null) {
            formParams.append('usertags', requestParameters['usertags']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['location'] != null) {
            formParams.append('location', new Blob([JSON.stringify(MediaToJSON(requestParameters['location']))], { type: "application/json", }));
                    }


        let urlPath = `/album/upload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFromJSON(jsonValue));
    }

    /**
     * Upload album to feed     
     * Album Upload
     */
    async albumUploadAlbumUploadPost(requestParameters: AlbumUploadAlbumUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Media> {
        const response = await this.albumUploadAlbumUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
