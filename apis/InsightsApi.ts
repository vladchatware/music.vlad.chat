/* tslint:disable */
/* eslint-disable */
/**
 * instagrapi-rest
 * RESTful API Service for instagrapi
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface AccountInsightsAccountPostRequest {
    sessionid: string;
}

export interface MediaFeedAllInsightsMediaFeedAllPostRequest {
    sessionid: string;
    postType?: MediaFeedAllInsightsMediaFeedAllPostPostTypeEnum;
    timeFrame?: MediaFeedAllInsightsMediaFeedAllPostTimeFrameEnum;
    dataOrdering?: MediaFeedAllInsightsMediaFeedAllPostDataOrderingEnum;
    count?: number;
}

export interface MediaInsightsMediaPostRequest {
    sessionid: string;
    mediaPk: number;
}

/**
 * 
 */
export class InsightsApi extends runtime.BaseAPI {

    /**
     * Get insights for account     
     * Account
     */
    async accountInsightsAccountPostRaw(requestParameters: AccountInsightsAccountPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling accountInsightsAccountPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }


        let urlPath = `/insights/account`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get insights for account     
     * Account
     */
    async accountInsightsAccountPost(requestParameters: AccountInsightsAccountPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.accountInsightsAccountPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return medias with insights     
     * Media Feed All
     */
    async mediaFeedAllInsightsMediaFeedAllPostRaw(requestParameters: MediaFeedAllInsightsMediaFeedAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling mediaFeedAllInsightsMediaFeedAllPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['post_type'] = requestParameters['postType'];
        }

        if (requestParameters['timeFrame'] != null) {
            queryParameters['time_frame'] = requestParameters['timeFrame'];
        }

        if (requestParameters['dataOrdering'] != null) {
            queryParameters['data_ordering'] = requestParameters['dataOrdering'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }


        let urlPath = `/insights/media_feed_all`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return medias with insights     
     * Media Feed All
     */
    async mediaFeedAllInsightsMediaFeedAllPost(requestParameters: MediaFeedAllInsightsMediaFeedAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.mediaFeedAllInsightsMediaFeedAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get insights data for media     
     * Media
     */
    async mediaInsightsMediaPostRaw(requestParameters: MediaInsightsMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling mediaInsightsMediaPost().'
            );
        }

        if (requestParameters['mediaPk'] == null) {
            throw new runtime.RequiredError(
                'mediaPk',
                'Required parameter "mediaPk" was null or undefined when calling mediaInsightsMediaPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['mediaPk'] != null) {
            formParams.append('media_pk', requestParameters['mediaPk'] as any);
        }


        let urlPath = `/insights/media`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get insights data for media     
     * Media
     */
    async mediaInsightsMediaPost(requestParameters: MediaInsightsMediaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.mediaInsightsMediaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const MediaFeedAllInsightsMediaFeedAllPostPostTypeEnum = {
    All: 'ALL',
    CarouselV2: 'CAROUSEL_V2',
    Image: 'IMAGE',
    Shopping: 'SHOPPING',
    Video: 'VIDEO'
} as const;
export type MediaFeedAllInsightsMediaFeedAllPostPostTypeEnum = typeof MediaFeedAllInsightsMediaFeedAllPostPostTypeEnum[keyof typeof MediaFeedAllInsightsMediaFeedAllPostPostTypeEnum];
/**
 * @export
 */
export const MediaFeedAllInsightsMediaFeedAllPostTimeFrameEnum = {
    OneWeek: 'ONE_WEEK',
    OneMonth: 'ONE_MONTH',
    ThreeMonths: 'THREE_MONTHS',
    SixMonths: 'SIX_MONTHS',
    OneYear: 'ONE_YEAR',
    TwoYears: 'TWO_YEARS'
} as const;
export type MediaFeedAllInsightsMediaFeedAllPostTimeFrameEnum = typeof MediaFeedAllInsightsMediaFeedAllPostTimeFrameEnum[keyof typeof MediaFeedAllInsightsMediaFeedAllPostTimeFrameEnum];
/**
 * @export
 */
export const MediaFeedAllInsightsMediaFeedAllPostDataOrderingEnum = {
    ReachCount: 'REACH_COUNT',
    LikeCount: 'LIKE_COUNT',
    Follow: 'FOLLOW',
    ShareCount: 'SHARE_COUNT',
    BioLinkClick: 'BIO_LINK_CLICK',
    CommentCount: 'COMMENT_COUNT',
    ImpressionCount: 'IMPRESSION_COUNT',
    ProfileView: 'PROFILE_VIEW',
    VideoViewCount: 'VIDEO_VIEW_COUNT',
    SaveCount: 'SAVE_COUNT'
} as const;
export type MediaFeedAllInsightsMediaFeedAllPostDataOrderingEnum = typeof MediaFeedAllInsightsMediaFeedAllPostDataOrderingEnum[keyof typeof MediaFeedAllInsightsMediaFeedAllPostDataOrderingEnum];
