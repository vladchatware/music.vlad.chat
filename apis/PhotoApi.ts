/* tslint:disable */
/* eslint-disable */
/**
 * instagrapi-rest
 * RESTful API Service for instagrapi
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Location,
  Media,
  Story,
  StoryHashtag,
  StoryLink,
  StoryLocation,
  StoryMention,
  StorySticker,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LocationFromJSON,
    LocationToJSON,
    MediaFromJSON,
    MediaToJSON,
    StoryFromJSON,
    StoryToJSON,
    StoryHashtagFromJSON,
    StoryHashtagToJSON,
    StoryLinkFromJSON,
    StoryLinkToJSON,
    StoryLocationFromJSON,
    StoryLocationToJSON,
    StoryMentionFromJSON,
    StoryMentionToJSON,
    StoryStickerFromJSON,
    StoryStickerToJSON,
} from '../models/index';

export interface PhotoDownloadByUrlPhotoDownloadByUrlPostRequest {
    sessionid: string;
    url: string;
    filename?: string;
    folder?: string;
    returnFile?: boolean;
}

export interface PhotoDownloadPhotoDownloadPostRequest {
    sessionid: string;
    mediaPk: number;
    folder?: string;
    returnFile?: boolean;
}

export interface PhotoUploadPhotoUploadByUrlPostRequest {
    sessionid: string;
    url: string;
    caption: string;
    uploadId?: string;
    usertags?: Array<string>;
    location?: Location;
}

export interface PhotoUploadPhotoUploadPostRequest {
    sessionid: string;
    file: Blob;
    caption: string;
    uploadId?: string;
    usertags?: Array<string>;
    location?: Location;
}

export interface PhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest {
    sessionid: string;
    url: string;
    asVideo?: boolean;
    caption?: string;
    mentions?: Array<StoryMention>;
    locations?: Array<StoryLocation>;
    links?: Array<StoryLink>;
    hashtags?: Array<StoryHashtag>;
    stickers?: Array<StorySticker>;
}

export interface PhotoUploadToStoryPhotoUploadToStoryPostRequest {
    sessionid: string;
    file: Blob;
    asVideo?: boolean;
    caption?: string;
    mentions?: Array<StoryMention>;
    locations?: Array<StoryLocation>;
    links?: Array<StoryLink>;
    hashtags?: Array<StoryHashtag>;
    stickers?: Array<StorySticker>;
}

/**
 * 
 */
export class PhotoApi extends runtime.BaseAPI {

    /**
     * Download photo using URL     
     * Photo Download By Url
     */
    async photoDownloadByUrlPhotoDownloadByUrlPostRaw(requestParameters: PhotoDownloadByUrlPhotoDownloadByUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling photoDownloadByUrlPhotoDownloadByUrlPost().'
            );
        }

        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling photoDownloadByUrlPhotoDownloadByUrlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['url'] != null) {
            formParams.append('url', requestParameters['url'] as any);
        }

        if (requestParameters['filename'] != null) {
            formParams.append('filename', requestParameters['filename'] as any);
        }

        if (requestParameters['folder'] != null) {
            formParams.append('folder', requestParameters['folder'] as any);
        }

        if (requestParameters['returnFile'] != null) {
            formParams.append('returnFile', requestParameters['returnFile'] as any);
        }


        let urlPath = `/photo/download/by_url`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download photo using URL     
     * Photo Download By Url
     */
    async photoDownloadByUrlPhotoDownloadByUrlPost(requestParameters: PhotoDownloadByUrlPhotoDownloadByUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.photoDownloadByUrlPhotoDownloadByUrlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download photo using media pk     
     * Photo Download
     */
    async photoDownloadPhotoDownloadPostRaw(requestParameters: PhotoDownloadPhotoDownloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling photoDownloadPhotoDownloadPost().'
            );
        }

        if (requestParameters['mediaPk'] == null) {
            throw new runtime.RequiredError(
                'mediaPk',
                'Required parameter "mediaPk" was null or undefined when calling photoDownloadPhotoDownloadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['mediaPk'] != null) {
            formParams.append('media_pk', requestParameters['mediaPk'] as any);
        }

        if (requestParameters['folder'] != null) {
            formParams.append('folder', requestParameters['folder'] as any);
        }

        if (requestParameters['returnFile'] != null) {
            formParams.append('returnFile', requestParameters['returnFile'] as any);
        }


        let urlPath = `/photo/download`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download photo using media pk     
     * Photo Download
     */
    async photoDownloadPhotoDownloadPost(requestParameters: PhotoDownloadPhotoDownloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.photoDownloadPhotoDownloadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload photo and configure to feed     
     * Photo Upload
     */
    async photoUploadPhotoUploadByUrlPostRaw(requestParameters: PhotoUploadPhotoUploadByUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Media>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling photoUploadPhotoUploadByUrlPost().'
            );
        }

        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling photoUploadPhotoUploadByUrlPost().'
            );
        }

        if (requestParameters['caption'] == null) {
            throw new runtime.RequiredError(
                'caption',
                'Required parameter "caption" was null or undefined when calling photoUploadPhotoUploadByUrlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['url'] != null) {
            formParams.append('url', requestParameters['url'] as any);
        }

        if (requestParameters['caption'] != null) {
            formParams.append('caption', requestParameters['caption'] as any);
        }

        if (requestParameters['uploadId'] != null) {
            formParams.append('upload_id', requestParameters['uploadId'] as any);
        }

        if (requestParameters['usertags'] != null) {
            formParams.append('usertags', requestParameters['usertags']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['location'] != null) {
            formParams.append('location', new Blob([JSON.stringify(MediaToJSON(requestParameters['location']))], { type: "application/json", }));
                    }


        let urlPath = `/photo/upload/by_url`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFromJSON(jsonValue));
    }

    /**
     * Upload photo and configure to feed     
     * Photo Upload
     */
    async photoUploadPhotoUploadByUrlPost(requestParameters: PhotoUploadPhotoUploadByUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Media> {
        const response = await this.photoUploadPhotoUploadByUrlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload photo and configure to feed     
     * Photo Upload
     */
    async photoUploadPhotoUploadPostRaw(requestParameters: PhotoUploadPhotoUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Media>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling photoUploadPhotoUploadPost().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling photoUploadPhotoUploadPost().'
            );
        }

        if (requestParameters['caption'] == null) {
            throw new runtime.RequiredError(
                'caption',
                'Required parameter "caption" was null or undefined when calling photoUploadPhotoUploadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['caption'] != null) {
            formParams.append('caption', requestParameters['caption'] as any);
        }

        if (requestParameters['uploadId'] != null) {
            formParams.append('upload_id', requestParameters['uploadId'] as any);
        }

        if (requestParameters['usertags'] != null) {
            formParams.append('usertags', requestParameters['usertags']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['location'] != null) {
            formParams.append('location', new Blob([JSON.stringify(MediaToJSON(requestParameters['location']))], { type: "application/json", }));
                    }


        let urlPath = `/photo/upload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFromJSON(jsonValue));
    }

    /**
     * Upload photo and configure to feed     
     * Photo Upload
     */
    async photoUploadPhotoUploadPost(requestParameters: PhotoUploadPhotoUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Media> {
        const response = await this.photoUploadPhotoUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload photo to story by URL to file     
     * Photo Upload To Story By Url
     */
    async photoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRaw(requestParameters: PhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Story>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling photoUploadToStoryByUrlPhotoUploadToStoryByUrlPost().'
            );
        }

        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling photoUploadToStoryByUrlPhotoUploadToStoryByUrlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['url'] != null) {
            formParams.append('url', requestParameters['url'] as any);
        }

        if (requestParameters['asVideo'] != null) {
            formParams.append('as_video', requestParameters['asVideo'] as any);
        }

        if (requestParameters['caption'] != null) {
            formParams.append('caption', requestParameters['caption'] as any);
        }

        if (requestParameters['mentions'] != null) {
            formParams.append('mentions', requestParameters['mentions']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['locations'] != null) {
            formParams.append('locations', requestParameters['locations']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['links'] != null) {
            formParams.append('links', requestParameters['links']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['hashtags'] != null) {
            formParams.append('hashtags', requestParameters['hashtags']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['stickers'] != null) {
            formParams.append('stickers', requestParameters['stickers']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }


        let urlPath = `/photo/upload_to_story/by_url`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoryFromJSON(jsonValue));
    }

    /**
     * Upload photo to story by URL to file     
     * Photo Upload To Story By Url
     */
    async photoUploadToStoryByUrlPhotoUploadToStoryByUrlPost(requestParameters: PhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Story> {
        const response = await this.photoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload photo to story     
     * Photo Upload To Story
     */
    async photoUploadToStoryPhotoUploadToStoryPostRaw(requestParameters: PhotoUploadToStoryPhotoUploadToStoryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Story>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling photoUploadToStoryPhotoUploadToStoryPost().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling photoUploadToStoryPhotoUploadToStoryPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['asVideo'] != null) {
            formParams.append('as_video', requestParameters['asVideo'] as any);
        }

        if (requestParameters['caption'] != null) {
            formParams.append('caption', requestParameters['caption'] as any);
        }

        if (requestParameters['mentions'] != null) {
            formParams.append('mentions', requestParameters['mentions']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['locations'] != null) {
            formParams.append('locations', requestParameters['locations']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['links'] != null) {
            formParams.append('links', requestParameters['links']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['hashtags'] != null) {
            formParams.append('hashtags', requestParameters['hashtags']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['stickers'] != null) {
            formParams.append('stickers', requestParameters['stickers']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }


        let urlPath = `/photo/upload_to_story`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoryFromJSON(jsonValue));
    }

    /**
     * Upload photo to story     
     * Photo Upload To Story
     */
    async photoUploadToStoryPhotoUploadToStoryPost(requestParameters: PhotoUploadToStoryPhotoUploadToStoryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Story> {
        const response = await this.photoUploadToStoryPhotoUploadToStoryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
