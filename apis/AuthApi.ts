/* tslint:disable */
/* eslint-disable */
/**
 * instagrapi-rest
 * RESTful API Service for instagrapi
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface AuthLoginAuthLoginPostRequest {
    username: string;
    password: string;
    verificationCode?: string;
    proxy?: string;
    locale?: string;
    timezone?: string;
}

export interface AuthLoginBySessionidAuthLoginBySessionidPostRequest {
    sessionid: string;
}

export interface AuthReloginAuthReloginPostRequest {
    sessionid: string;
}

export interface SettingsGetAuthSettingsGetGetRequest {
    sessionid: string;
}

export interface SettingsSetAuthSettingsSetPostRequest {
    settings: string;
    sessionid?: string;
}

export interface TimelineFeedAuthTimelineFeedGetRequest {
    sessionid: string;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Login by username and password with 2FA     
     * Auth Login
     */
    async authLoginAuthLoginPostRaw(requestParameters: AuthLoginAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling authLoginAuthLoginPost().'
            );
        }

        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling authLoginAuthLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['username'] != null) {
            formParams.append('username', requestParameters['username'] as any);
        }

        if (requestParameters['password'] != null) {
            formParams.append('password', requestParameters['password'] as any);
        }

        if (requestParameters['verificationCode'] != null) {
            formParams.append('verification_code', requestParameters['verificationCode'] as any);
        }

        if (requestParameters['proxy'] != null) {
            formParams.append('proxy', requestParameters['proxy'] as any);
        }

        if (requestParameters['locale'] != null) {
            formParams.append('locale', requestParameters['locale'] as any);
        }

        if (requestParameters['timezone'] != null) {
            formParams.append('timezone', requestParameters['timezone'] as any);
        }


        let urlPath = `/auth/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Login by username and password with 2FA     
     * Auth Login
     */
    async authLoginAuthLoginPost(requestParameters: AuthLoginAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.authLoginAuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login by sessionid     
     * Auth Login By Sessionid
     */
    async authLoginBySessionidAuthLoginBySessionidPostRaw(requestParameters: AuthLoginBySessionidAuthLoginBySessionidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling authLoginBySessionidAuthLoginBySessionidPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }


        let urlPath = `/auth/login_by_sessionid`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Login by sessionid     
     * Auth Login By Sessionid
     */
    async authLoginBySessionidAuthLoginBySessionidPost(requestParameters: AuthLoginBySessionidAuthLoginBySessionidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.authLoginBySessionidAuthLoginBySessionidPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Relogin by username and password (with clean cookies)     
     * Auth Relogin
     */
    async authReloginAuthReloginPostRaw(requestParameters: AuthReloginAuthReloginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling authReloginAuthReloginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }


        let urlPath = `/auth/relogin`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Relogin by username and password (with clean cookies)     
     * Auth Relogin
     */
    async authReloginAuthReloginPost(requestParameters: AuthReloginAuthReloginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.authReloginAuthReloginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get client\'s settings     
     * Settings Get
     */
    async settingsGetAuthSettingsGetGetRaw(requestParameters: SettingsGetAuthSettingsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling settingsGetAuthSettingsGetGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sessionid'] != null) {
            queryParameters['sessionid'] = requestParameters['sessionid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/settings/get`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get client\'s settings     
     * Settings Get
     */
    async settingsGetAuthSettingsGetGet(requestParameters: SettingsGetAuthSettingsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.settingsGetAuthSettingsGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set client\'s settings     
     * Settings Set
     */
    async settingsSetAuthSettingsSetPostRaw(requestParameters: SettingsSetAuthSettingsSetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['settings'] == null) {
            throw new runtime.RequiredError(
                'settings',
                'Required parameter "settings" was null or undefined when calling settingsSetAuthSettingsSetPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['settings'] != null) {
            formParams.append('settings', requestParameters['settings'] as any);
        }

        if (requestParameters['sessionid'] != null) {
            formParams.append('sessionid', requestParameters['sessionid'] as any);
        }


        let urlPath = `/auth/settings/set`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Set client\'s settings     
     * Settings Set
     */
    async settingsSetAuthSettingsSetPost(requestParameters: SettingsSetAuthSettingsSetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.settingsSetAuthSettingsSetPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get your timeline feed     
     * Timeline Feed
     */
    async timelineFeedAuthTimelineFeedGetRaw(requestParameters: TimelineFeedAuthTimelineFeedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['sessionid'] == null) {
            throw new runtime.RequiredError(
                'sessionid',
                'Required parameter "sessionid" was null or undefined when calling timelineFeedAuthTimelineFeedGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sessionid'] != null) {
            queryParameters['sessionid'] = requestParameters['sessionid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/timeline_feed`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get your timeline feed     
     * Timeline Feed
     */
    async timelineFeedAuthTimelineFeedGet(requestParameters: TimelineFeedAuthTimelineFeedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.timelineFeedAuthTimelineFeedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
